package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ThamsotlAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThamsotlAllPropertiesEquals(Thamsotl expected, Thamsotl actual) {
        assertThamsotlAutoGeneratedPropertiesEquals(expected, actual);
        assertThamsotlAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThamsotlAllUpdatablePropertiesEquals(Thamsotl expected, Thamsotl actual) {
        assertThamsotlUpdatableFieldsEquals(expected, actual);
        assertThamsotlUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThamsotlAutoGeneratedPropertiesEquals(Thamsotl expected, Thamsotl actual) {
        assertThat(expected)
            .as("Verify Thamsotl auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThamsotlUpdatableFieldsEquals(Thamsotl expected, Thamsotl actual) {
        assertThat(expected)
            .as("Verify Thamsotl relevant properties")
            .satisfies(e -> assertThat(e.getThangnam()).as("check thangnam").isEqualTo(actual.getThangnam()))
            .satisfies(e -> assertThat(e.getNcchuan()).as("check ncchuan").isEqualTo(actual.getNcchuan()))
            .satisfies(e -> assertThat(e.getGiocchuan()).as("check giocchuan").isEqualTo(actual.getGiocchuan()))
            .satisfies(e -> assertThat(e.getHsgioth()).as("check hsgioth").isEqualTo(actual.getHsgioth()))
            .satisfies(e -> assertThat(e.getHsgiole()).as("check hsgiole").isEqualTo(actual.getHsgiole()))
            .satisfies(e -> assertThat(e.getPcan()).as("check pcan").isEqualTo(actual.getPcan()))
            .satisfies(e -> assertThat(e.getTlbhxh()).as("check tlbhxh").isEqualTo(actual.getTlbhxh()))
            .satisfies(e -> assertThat(e.getTlbhyt()).as("check tlbhyt").isEqualTo(actual.getTlbhyt()))
            .satisfies(e -> assertThat(e.getTlbhtn()).as("check tlbhtn").isEqualTo(actual.getTlbhtn()))
            .satisfies(e -> assertThat(e.getTlkpcd()).as("check tlkpcd").isEqualTo(actual.getTlkpcd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertThamsotlUpdatableRelationshipsEquals(Thamsotl expected, Thamsotl actual) {
        assertThat(expected)
            .as("Verify Thamsotl relationships")
            .satisfies(e -> assertThat(e.getNhanvien()).as("check nhanvien").isEqualTo(actual.getNhanvien()));
    }
}
