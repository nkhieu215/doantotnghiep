package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class NhanvienAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhanvienAllPropertiesEquals(Nhanvien expected, Nhanvien actual) {
        assertNhanvienAutoGeneratedPropertiesEquals(expected, actual);
        assertNhanvienAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhanvienAllUpdatablePropertiesEquals(Nhanvien expected, Nhanvien actual) {
        assertNhanvienUpdatableFieldsEquals(expected, actual);
        assertNhanvienUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhanvienAutoGeneratedPropertiesEquals(Nhanvien expected, Nhanvien actual) {
        assertThat(expected)
            .as("Verify Nhanvien auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhanvienUpdatableFieldsEquals(Nhanvien expected, Nhanvien actual) {
        assertThat(expected)
            .as("Verify Nhanvien relevant properties")
            .satisfies(e -> assertThat(e.getManv()).as("check manv").isEqualTo(actual.getManv()))
            .satisfies(e -> assertThat(e.getHoten()).as("check hoten").isEqualTo(actual.getHoten()))
            .satisfies(
                e ->
                    assertThat(e.getNgaysinh())
                        .as("check ngaysinh")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getNgaysinh())
            )
            .satisfies(e -> assertThat(e.getGioitinh()).as("check gioitinh").isEqualTo(actual.getGioitinh()))
            .satisfies(e -> assertThat(e.getQuequan()).as("check quequan").isEqualTo(actual.getQuequan()))
            .satisfies(e -> assertThat(e.getDiachi()).as("check diachi").isEqualTo(actual.getDiachi()))
            .satisfies(e -> assertThat(e.getHsluong()).as("check hsluong").isEqualTo(actual.getHsluong()))
            .satisfies(e -> assertThat(e.getMsthue()).as("check msthue").isEqualTo(actual.getMsthue()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNhanvienUpdatableRelationshipsEquals(Nhanvien expected, Nhanvien actual) {
        assertThat(expected)
            .as("Verify Nhanvien relationships")
            .satisfies(e -> assertThat(e.getChucvu()).as("check chucvu").isEqualTo(actual.getChucvu()))
            .satisfies(e -> assertThat(e.getPhongban()).as("check phongban").isEqualTo(actual.getPhongban()));
    }
}
